import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns 
import numpy as np

file_path1 = r"/mnt/c/Users/s139501/CSV/open_transactions.csv"  #define path for WSL is different
file_path2 = r"/mnt/c/Users/s139501/CSV/open_metervalues.csv"  #define path for WSL is different

df1 = pd.read_csv(file_path1, delimiter=';', decimal=',') #europeans
df2 = pd.read_csv(file_path2, delimiter=';', decimal=',') #europeans


##Average Daily Arrival and Departure Distribution##


# Convert the columns to datetime
df1['UTCTransactionStart'] = pd.to_datetime(df1['UTCTransactionStart'], format='%d/%m/%Y %H:%M')
df1['UTCTransactionStop'] = pd.to_datetime(df1['UTCTransactionStop'], format='%d/%m/%Y %H:%M')

# Extract the hours and days
df1['ArrivalHour'] = df1['UTCTransactionStart'].dt.hour
df1['DepartureHour'] = df1['UTCTransactionStop'].dt.hour
df1['DayOfWeek'] = df1['UTCTransactionStart'].dt.dayofweek

# Segregate df1 into weekdays and weekends
df_weekdays = df1[df1['DayOfWeek'].between(0, 4)]
df_weekends = df1[df1['DayOfWeek'].between(5, 6)]

def plot_distribution(df, title_suffix):
    arrival_counts = df['ArrivalHour'].value_counts().sort_index()
    departure_counts = df['DepartureHour'].value_counts().sort_index()
    
    width = 0.4  # Width of the bars
    hours = range(24)
    
    # Create positions for each bar
    arrival_positions = [hour - width/2 for hour in hours]
    departure_positions = [hour + width/2 for hour in hours]
    
    plt.figure(figsize=(12, 5))
    
    # Plot the bars for arrivals and departures side by side
    plt.bar(arrival_positions, arrival_counts.reindex(hours, fill_value=0), width=width, label='Arrival', align='center')
    plt.bar(departure_positions, departure_counts.reindex(hours, fill_value=0), width=width, label='Departure', align='center')
    
    plt.title(f'Average Distribution over 24 Hours ({title_suffix})')
    plt.xlabel('Hour of Day')
    plt.ylabel('Count')
    plt.xticks(hours)
    plt.legend()
    plt.tight_layout()

# Plot distributions for weekdays and weekends
plot_distribution(df_weekdays, 'Weekdays')
plot_distribution(df_weekends, 'Weekends')

##Plotting distribution of TotalEnergy consumer per weekday and weekendday
def plot_energy_distribution(df, title_suffix):
    # Initialize a dictionary with zeros for each hour
    hourly_energy = {hour: 0 for hour in range(24)}
    
    # Iterate over each transaction
    for _, row in df.iterrows():
        duration = (row['UTCTransactionStop'] - row['UTCTransactionStart']).seconds / 3600  # Convert seconds to hours
        
        # Handle cases where duration is zero
        if duration == 0:
            hourly_energy[row['ArrivalHour']] += row['TotalEnergy']
            continue
        
        energy_per_hour = row['TotalEnergy'] / duration
        
        # Distribute energy over the relevant hours
        for hour in range(row['ArrivalHour'], row['DepartureHour']):
            # Avoid spilling over 24 hours (this is a simplification)
            actual_hour = hour % 24
            hourly_energy[actual_hour] += energy_per_hour
    
    # Extract the data to be plotted
    hours = list(hourly_energy.keys())
    energies = list(hourly_energy.values())

    # Normalize the values to range between 0 and 1, and then invert the intensity
    normalized_values = 1 - (np.array(energies) / max(energies))

    # Generate varying intensities of green based on the inverted normalized values
    colors = [(0, value, 0) for value in normalized_values]

    plt.figure(figsize=(12, 5))
    sns.barplot(x=hours, y=energies, palette=colors)
    
    plt.title(f'Average TotalEnergy demand (kWh) Distribution over 24 Hours ({title_suffix})')
    plt.xlabel('Hour of Day')
    plt.ylabel('Average TotalEnergy (kWh)')
    plt.xticks(range(24))
    plt.tight_layout()

plot_energy_distribution(df_weekdays, 'Weekdays')
plot_energy_distribution(df_weekends, 'Weekends')


# ## Boxplots for insights on other columns ##

# # Boxplot for ConnectedTime against ArrivalHour
# plt.figure(figsize=(10, 6))
# sns.boxplot(x='ArrivalHour', y='ConnectedTime', data=df1)
# plt.title('Boxplot of ConnectedTime by Hour of the Day')

# # Boxplot for ChargeTime against ArrivalHour
# plt.figure(figsize=(10, 6))
# sns.boxplot(x='ArrivalHour', y='ChargeTime', data=df1)
# plt.title('Boxplot of ChargeTime by Hour of the Day')

# # Boxplot for TotalEnergy against ArrivalHour
# plt.figure(figsize=(10, 6))
# sns.boxplot(x='ArrivalHour', y='TotalEnergy', data=df1)
# plt.title('Boxplot of TotalEnergy by Hour of the Day')

# # Boxplot for MaxPower against ArrivalHour
# plt.figure(figsize=(10, 6))
# sns.boxplot(x='ArrivalHour', y='MaxPower', data=df1)
# plt.title('Boxplot of MaxPower by Hour of the Day')


plt.show()

# #Prints and Excel exports

# #print(df1.dtypes)
# #print(df1.head()) # Print first 5 rows
# #df1.head().to_excel('/mnt/c/Users/s139501/Exceloutput/df1head.xlsx', index=False, engine='openpyxl') #export to excel for table in report

# #print(df2.dtypes)
# #print(df2.head()) # Print first 5 rows
# #df2.head().to_excel('/mnt/c/Users/s139501/Exceloutput/df2head.xlsx', index=False, engine='openpyxl') #export to excel for table in report

# #print(df1.describe())
# #describe_df1 = df1.describe()
# #describe_df1.to_excel('/mnt/c/Users/s139501/Exceloutput/df1describe.xlsx', index=True, engine='openpyxl')


# #print(df2.describe())
# #describe_df2 = df2.describe()
# #describe_df2.to_excel('/mnt/c/Users/s139501/Exceloutput/df2describe.xlsx', index=True, engine='openpyxl')